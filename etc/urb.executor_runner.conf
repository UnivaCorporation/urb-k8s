[ChannelFactory]
# The following shows how you can configure redis sentinel support
#message_broker = redis_sentinel_message_broker.RedisSentinelMessageBroker(sentinel_servers=[('localhost',26379)],sentinel_master="mymaster")
message_broker = redis_message_broker.RedisMessageBroker(host='urb-master.default', port=6379)

[ExecutorRunner]
service_monitor_endpoint = urb.service.monitor
mesos_master_endpoint = urb.endpoint.0.mesos
mesos_work_dir = %(tmp)s/urb

[ExecutorHandler]
urb_lib_path = /urb/lib/liburb.so
fetcher_path = /urb/bin/fetcher
command_executor_path = /urb/bin/command-executor
ld_library_path = /urb/lib

# ###########################################################
# Logging Configuration
#
# The LoggerLevels section lists regular expressions to match against
# configured loggers Expressions are matched top down with the last
# match setting the effective level.  The root key describes the root
# logger level which is the default level for all loggers.
#
# The lower sections describe configuration for specific log file handlers.
# In order for a message to be emitted by a specific handler the level of
# the message must be greater than or equal to both the logger level and
# the handler level.
#
# Examples setting LoggerLevels:
#
# 1) Trace level debugging for BrokerDbHandler debug for everything else
#    other than root.
#
# [LoggerLevels]
# root=error
# expressions: ^.*$=debug
#     ^BrokerDbHandler$=trace
#
# 2) Trace level debugging for any logger beginning with Broker and debug for
#    everything else other than root.
#
# [LoggerLevels]
# root=error
# expressions: ^.*$=debug
#     ^Broker.*$=trace
#
# Some expressions examples:
#
# expressions: ^.*$=debug
#     ^Broker.*$=trace
#     DbManager=info
#     urb\.*=critical
#
# expressions: Brokers=debug
#
# Remeber to set the level in the "Handlers" section if you want to see log
# messages of a certain level on a specific handler.
#

[LoggerLevels]
root=error
expressions: ^.*$=trace
#       ^.*MesosHandler.*$=trace

[ConsoleLogging]
handler=stream_log_handler.StreamLogHandler(sys.stdout,)
level=debug
format=%(asctime)s|%(levelname)s|%(process)d|%(filename)s:%(lineno)d|%(message)s
datefmt=%Y-%m-%d %H:%M:%S

# Custom log files can be setup here.
# A new config section named "FileLogging<something>"
# will be read and enacted by the logger.
# NOTE: If you wish to use a filter you must make
# sure that the modules you want to log are logging to the appropriate logger.
# In other words, if you create a filter for "urb.broker", you should make
# sure that all of the modules in urb/broker actually create their loggers
# with "urb.broker.<classname>".
[FileLogging]
handler=timed_rotating_file_log_handler.TimedRotatingFileLogHandler('/tmp/urb.executor_runner.log')
level=trace
format=%(asctime)s|%(levelname)s|%(process)d|%(message)s
#format=%(asctime)s %(levelname)s %(process)d %(filename)s:%(lineno)d %(message)s
datefmt=%Y-%m-%d %H:%M:%S
#filter=urb

